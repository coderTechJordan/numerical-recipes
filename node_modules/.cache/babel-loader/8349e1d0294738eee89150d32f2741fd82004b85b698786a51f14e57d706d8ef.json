{"ast":null,"code":"var _jsxFileName = \"/home/jordan/numerical-recipes/src/models/NRvector.tsx\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport class NRvector {\n  constructor(n, a) {\n    this.nn = void 0;\n    this.v = void 0;\n    // printToScreen(): string {\n    //     return `NRvector<Int>: [${this.v.join(', ')}]`;\n    //   }      \n    this.printToScreen = () => {\n      // Use map to wrap each element in a span and join them\n      return vec.printToScreen().split(', ').map((item, index) => /*#__PURE__*/_jsxDEV(\"span\", {\n        children: item\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 13\n      }, this));\n    };\n    if (n <= 0) {\n      throw new Error(\"Invalid vector dimension. Length must be greater than zero.\");\n    }\n    this.nn = n;\n    this.v = Array.isArray(a) ? [...a] : Array(n).fill(a);\n  }\n  get length() {\n    return this.nn;\n  }\n  get(index) {\n    if (index < 0 || index >= this.nn) {\n      throw new Error(\"NRvector subscript out of bounds\");\n    }\n    return this.v[index];\n  }\n  set(index, value) {\n    if (index < 0 || index >= this.nn) {\n      throw new Error(\"NRvector subscript out of bounds\");\n    }\n    this.v[index] = value;\n  }\n  resize(newn, a) {\n    if (newn !== this.nn) {\n      this.nn = newn;\n      this.v = Array(newn).fill(a);\n    }\n  }\n  updateValues(newValues) {\n    if (newValues.length !== this.nn) {\n      throw new Error(\"Invalid number of elements provided for updating NRvector\");\n    }\n    this.v = newValues;\n  }\n}","map":{"version":3,"names":["NRvector","constructor","n","a","nn","v","printToScreen","vec","split","map","item","index","_jsxDEV","children","fileName","_jsxFileName","lineNumber","columnNumber","Error","Array","isArray","fill","length","get","set","value","resize","newn","updateValues","newValues"],"sources":["/home/jordan/numerical-recipes/src/models/NRvector.tsx"],"sourcesContent":["export class NRvector<T extends number> {\n    private nn: number;\n    private v: T[];\n\n    constructor(n: number, a?: T | T[]) {\n        if (n <= 0) {\n            throw new Error(\"Invalid vector dimension. Length must be greater than zero.\");\n        }\n\n        this.nn = n;\n        this.v = Array.isArray(a) ? [...a] : Array(n).fill(a as T);\n    }\n\n    get length(): number {\n        return this.nn;\n    }\n\n    get(index: number): T {\n        if (index < 0 || index >= this.nn) {\n            throw new Error(\"NRvector subscript out of bounds\");\n        }\n        return this.v[index];\n    }\n\n    set(index: number, value: T): void {\n        if (index < 0 || index >= this.nn) {\n            throw new Error(\"NRvector subscript out of bounds\");\n        }\n        this.v[index] = value;\n    }\n\n    resize(newn: number, a: T): void {\n        if (newn !== this.nn) {\n            this.nn = newn;\n            this.v = Array(newn).fill(a);\n        }\n    }\n\n    updateValues(newValues: T[]): void {\n        if (newValues.length !== this.nn) {\n            throw new Error(\"Invalid number of elements provided for updating NRvector\");\n        }\n\n        this.v = newValues;\n    }\n\n    // printToScreen(): string {\n    //     return `NRvector<Int>: [${this.v.join(', ')}]`;\n    //   }      \n\n    printToScreen = () => {\n        // Use map to wrap each element in a span and join them\n        return vec.printToScreen().split(', ').map((item, index) => (\n            <span key={index}>{item}</span>\n        ));\n    };\n}\n"],"mappings":";;AAAA,OAAO,MAAMA,QAAQ,CAAmB;EAIpCC,WAAWA,CAACC,CAAS,EAAEC,CAAW,EAAE;IAAA,KAH5BC,EAAE;IAAA,KACFC,CAAC;IA4CT;IACA;IACA;IAAA,KAEAC,aAAa,GAAG,MAAM;MAClB;MACA,OAAOC,GAAG,CAACD,aAAa,CAAC,CAAC,CAACE,KAAK,CAAC,IAAI,CAAC,CAACC,GAAG,CAAC,CAACC,IAAI,EAAEC,KAAK,kBACnDC,OAAA;QAAAC,QAAA,EAAmBH;MAAI,GAAZC,KAAK;QAAAG,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAc,CACjC,CAAC;IACN,CAAC;IAlDG,IAAIf,CAAC,IAAI,CAAC,EAAE;MACR,MAAM,IAAIgB,KAAK,CAAC,6DAA6D,CAAC;IAClF;IAEA,IAAI,CAACd,EAAE,GAAGF,CAAC;IACX,IAAI,CAACG,CAAC,GAAGc,KAAK,CAACC,OAAO,CAACjB,CAAC,CAAC,GAAG,CAAC,GAAGA,CAAC,CAAC,GAAGgB,KAAK,CAACjB,CAAC,CAAC,CAACmB,IAAI,CAAClB,CAAM,CAAC;EAC9D;EAEA,IAAImB,MAAMA,CAAA,EAAW;IACjB,OAAO,IAAI,CAAClB,EAAE;EAClB;EAEAmB,GAAGA,CAACZ,KAAa,EAAK;IAClB,IAAIA,KAAK,GAAG,CAAC,IAAIA,KAAK,IAAI,IAAI,CAACP,EAAE,EAAE;MAC/B,MAAM,IAAIc,KAAK,CAAC,kCAAkC,CAAC;IACvD;IACA,OAAO,IAAI,CAACb,CAAC,CAACM,KAAK,CAAC;EACxB;EAEAa,GAAGA,CAACb,KAAa,EAAEc,KAAQ,EAAQ;IAC/B,IAAId,KAAK,GAAG,CAAC,IAAIA,KAAK,IAAI,IAAI,CAACP,EAAE,EAAE;MAC/B,MAAM,IAAIc,KAAK,CAAC,kCAAkC,CAAC;IACvD;IACA,IAAI,CAACb,CAAC,CAACM,KAAK,CAAC,GAAGc,KAAK;EACzB;EAEAC,MAAMA,CAACC,IAAY,EAAExB,CAAI,EAAQ;IAC7B,IAAIwB,IAAI,KAAK,IAAI,CAACvB,EAAE,EAAE;MAClB,IAAI,CAACA,EAAE,GAAGuB,IAAI;MACd,IAAI,CAACtB,CAAC,GAAGc,KAAK,CAACQ,IAAI,CAAC,CAACN,IAAI,CAAClB,CAAC,CAAC;IAChC;EACJ;EAEAyB,YAAYA,CAACC,SAAc,EAAQ;IAC/B,IAAIA,SAAS,CAACP,MAAM,KAAK,IAAI,CAAClB,EAAE,EAAE;MAC9B,MAAM,IAAIc,KAAK,CAAC,2DAA2D,CAAC;IAChF;IAEA,IAAI,CAACb,CAAC,GAAGwB,SAAS;EACtB;AAYJ"},"metadata":{},"sourceType":"module","externalDependencies":[]}