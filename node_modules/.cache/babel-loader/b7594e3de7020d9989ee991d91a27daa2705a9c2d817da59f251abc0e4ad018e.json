{"ast":null,"code":"export class NRvector {\n  constructor(n, a) {\n    this.nn = void 0;\n    this.v = void 0;\n    if (n <= 0) {\n      throw new Error(\"Invalid vector dimension. Length must be greater than zero.\");\n    }\n    this.nn = n;\n    this.v = Array.isArray(a) ? [...a] : Array(n).fill(a);\n  }\n  get length() {\n    return this.nn;\n  }\n  get(index) {\n    if (index < 0 || index >= this.nn) {\n      throw new Error(\"NRvector subscript out of bounds\");\n    }\n    return this.v[index];\n  }\n  set(index, value) {\n    if (index < 0 || index >= this.nn) {\n      throw new Error(\"NRvector subscript out of bounds\");\n    }\n    this.v[index] = value;\n  }\n  resize(newn, a) {\n    if (newn !== this.nn) {\n      this.nn = newn;\n      this.v = Array(newn).fill(a);\n    }\n  }\n  updateValues(newValues) {\n    if (newValues.length !== this.nn) {\n      throw new Error(\"Invalid number of elements provided for updating NRvector\");\n    }\n    this.v = newValues;\n  }\n  printToScreen() {\n    return `[${this.v.join(', ')}]`;\n  }\n  updateFromUserInput(inputString) {\n    const newValues = inputString.split(',').map(item => parseFloat(item.trim())).filter(value => !isNaN(value));\n    if (newValues.length !== this.nn) {\n      throw new Error(`Invalid number of elements provided for updating NRvector. Expected ${this.nn} elements.`);\n    }\n    this.v = newValues;\n  }\n}","map":{"version":3,"names":["NRvector","constructor","n","a","nn","v","Error","Array","isArray","fill","length","get","index","set","value","resize","newn","updateValues","newValues","printToScreen","join","updateFromUserInput","inputString","split","map","item","parseFloat","trim","filter","isNaN"],"sources":["/home/jordan/numerical-recipes/src/models/NRvector.tsx"],"sourcesContent":["export class NRvector<T extends number> {\n    private nn: number;\n    private v: T[];\n  \n    constructor(n: number, a?: T | T[]) {\n      if (n <= 0) {\n        throw new Error(\"Invalid vector dimension. Length must be greater than zero.\");\n      }\n  \n      this.nn = n;\n      this.v = Array.isArray(a) ? [...a] : Array(n).fill(a as T);\n    }\n  \n    get length(): number {\n      return this.nn;\n    }\n  \n    get(index: number): T {\n      if (index < 0 || index >= this.nn) {\n        throw new Error(\"NRvector subscript out of bounds\");\n      }\n      return this.v[index];\n    }\n  \n    set(index: number, value: T): void {\n      if (index < 0 || index >= this.nn) {\n        throw new Error(\"NRvector subscript out of bounds\");\n      }\n      this.v[index] = value;\n    }\n  \n    resize(newn: number, a: T): void {\n      if (newn !== this.nn) {\n        this.nn = newn;\n        this.v = Array(newn).fill(a);\n      }\n    }\n  \n    updateValues(newValues: T[]): void {\n      if (newValues.length !== this.nn) {\n        throw new Error(\"Invalid number of elements provided for updating NRvector\");\n      }\n  \n      this.v = newValues;\n    }\n  \n    printToScreen(): string {\n      return `[${this.v.join(', ')}]`;\n    }\n\n    updateFromUserInput(inputString: string): void {\n        const newValues = inputString\n          .split(',')\n          .map((item) => parseFloat(item.trim()))\n          .filter((value) => !isNaN(value));\n    \n        if (newValues.length !== this.nn) {\n          throw new Error(`Invalid number of elements provided for updating NRvector. Expected ${this.nn} elements.`);\n        }\n    \n        this.v = newValues as T[];\n      }\n    }\n  "],"mappings":"AAAA,OAAO,MAAMA,QAAQ,CAAmB;EAIpCC,WAAWA,CAACC,CAAS,EAAEC,CAAW,EAAE;IAAA,KAH5BC,EAAE;IAAA,KACFC,CAAC;IAGP,IAAIH,CAAC,IAAI,CAAC,EAAE;MACV,MAAM,IAAII,KAAK,CAAC,6DAA6D,CAAC;IAChF;IAEA,IAAI,CAACF,EAAE,GAAGF,CAAC;IACX,IAAI,CAACG,CAAC,GAAGE,KAAK,CAACC,OAAO,CAACL,CAAC,CAAC,GAAG,CAAC,GAAGA,CAAC,CAAC,GAAGI,KAAK,CAACL,CAAC,CAAC,CAACO,IAAI,CAACN,CAAM,CAAC;EAC5D;EAEA,IAAIO,MAAMA,CAAA,EAAW;IACnB,OAAO,IAAI,CAACN,EAAE;EAChB;EAEAO,GAAGA,CAACC,KAAa,EAAK;IACpB,IAAIA,KAAK,GAAG,CAAC,IAAIA,KAAK,IAAI,IAAI,CAACR,EAAE,EAAE;MACjC,MAAM,IAAIE,KAAK,CAAC,kCAAkC,CAAC;IACrD;IACA,OAAO,IAAI,CAACD,CAAC,CAACO,KAAK,CAAC;EACtB;EAEAC,GAAGA,CAACD,KAAa,EAAEE,KAAQ,EAAQ;IACjC,IAAIF,KAAK,GAAG,CAAC,IAAIA,KAAK,IAAI,IAAI,CAACR,EAAE,EAAE;MACjC,MAAM,IAAIE,KAAK,CAAC,kCAAkC,CAAC;IACrD;IACA,IAAI,CAACD,CAAC,CAACO,KAAK,CAAC,GAAGE,KAAK;EACvB;EAEAC,MAAMA,CAACC,IAAY,EAAEb,CAAI,EAAQ;IAC/B,IAAIa,IAAI,KAAK,IAAI,CAACZ,EAAE,EAAE;MACpB,IAAI,CAACA,EAAE,GAAGY,IAAI;MACd,IAAI,CAACX,CAAC,GAAGE,KAAK,CAACS,IAAI,CAAC,CAACP,IAAI,CAACN,CAAC,CAAC;IAC9B;EACF;EAEAc,YAAYA,CAACC,SAAc,EAAQ;IACjC,IAAIA,SAAS,CAACR,MAAM,KAAK,IAAI,CAACN,EAAE,EAAE;MAChC,MAAM,IAAIE,KAAK,CAAC,2DAA2D,CAAC;IAC9E;IAEA,IAAI,CAACD,CAAC,GAAGa,SAAS;EACpB;EAEAC,aAAaA,CAAA,EAAW;IACtB,OAAQ,IAAG,IAAI,CAACd,CAAC,CAACe,IAAI,CAAC,IAAI,CAAE,GAAE;EACjC;EAEAC,mBAAmBA,CAACC,WAAmB,EAAQ;IAC3C,MAAMJ,SAAS,GAAGI,WAAW,CAC1BC,KAAK,CAAC,GAAG,CAAC,CACVC,GAAG,CAAEC,IAAI,IAAKC,UAAU,CAACD,IAAI,CAACE,IAAI,CAAC,CAAC,CAAC,CAAC,CACtCC,MAAM,CAAEd,KAAK,IAAK,CAACe,KAAK,CAACf,KAAK,CAAC,CAAC;IAEnC,IAAII,SAAS,CAACR,MAAM,KAAK,IAAI,CAACN,EAAE,EAAE;MAChC,MAAM,IAAIE,KAAK,CAAE,uEAAsE,IAAI,CAACF,EAAG,YAAW,CAAC;IAC7G;IAEA,IAAI,CAACC,CAAC,GAAGa,SAAgB;EAC3B;AACF"},"metadata":{},"sourceType":"module","externalDependencies":[]}