{"ast":null,"code":"export class LunarPhaseCalculator {\n  flmoon(n, nph) {\n    let i;\n    const c = n + nph / 4.0;\n    const t = c / 1236.85;\n    const t2 = t * t;\n    const as = 359.2242 + 29.105356 * c;\n    const am = 306.0253 + 385.816918 * c + 0.010730 * t2;\n    let jd = 2415020 + 28 * n + 7 * nph;\n    let xtra = 0.75933 + 1.53058868 * c + (1.178e-4 - 1.55e-7 * t) * t2;\n    if (nph === 0 || nph === 2) {\n      xtra += (0.1734 - 3.93e-4 * t) * Math.sin(LunarPhaseCalculator.RAD * as) - 0.4068 * Math.sin(LunarPhaseCalculator.RAD * am);\n    } else if (nph === 1 || nph === 3) {\n      xtra += (0.1721 - 4.0e-4 * t) * Math.sin(LunarPhaseCalculator.RAD * as) - 0.6280 * Math.sin(LunarPhaseCalculator.RAD * am);\n    } else {\n      throw new Error(\"nph is unknown in flmoon\");\n    }\n    i = xtra >= 0.0 ? Math.floor(xtra) : Math.ceil(xtra - 1.0);\n    jd += i;\n    const frac = xtra - i;\n    return {\n      jd,\n      frac\n    };\n  }\n}\nLunarPhaseCalculator.RAD = Math.PI / 180.0;","map":{"version":3,"names":["LunarPhaseCalculator","flmoon","n","nph","i","c","t","t2","as","am","jd","xtra","Math","sin","RAD","Error","floor","ceil","frac","PI"],"sources":["/home/jordan/numerical-recipes/src/models/LunarPhaseCalculator.tsx"],"sourcesContent":["export class LunarPhaseCalculator {\n    private static RAD: number = Math.PI / 180.0;\n  \n    flmoon(n: number, nph: number): { jd: number, frac: number } {\n      let i;\n      const c = n + nph / 4.0;\n      const t = c / 1236.85;\n      const t2 = t * t;\n      const as = 359.2242 + 29.105356 * c;\n      const am = 306.0253 + 385.816918 * c + 0.010730 * t2;\n      let jd = 2415020 + 28 * n + 7 * nph;\n      let xtra = 0.75933 + 1.53058868 * c + ((1.178e-4) - (1.55e-7) * t) * t2;\n  \n      if (nph === 0 || nph === 2) {\n        xtra += (0.1734 - 3.93e-4 * t) * Math.sin(LunarPhaseCalculator.RAD * as) - 0.4068 * Math.sin(LunarPhaseCalculator.RAD * am);\n      } else if (nph === 1 || nph === 3) {\n        xtra += (0.1721 - 4.0e-4 * t) * Math.sin(LunarPhaseCalculator.RAD * as) - 0.6280 * Math.sin(LunarPhaseCalculator.RAD * am);\n      } else {\n        throw new Error(\"nph is unknown in flmoon\");\n      }\n  \n      i = xtra >= 0.0 ? Math.floor(xtra) : Math.ceil(xtra - 1.0);\n      jd += i;\n  \n      const frac = xtra - i;\n  \n      return { jd, frac };\n    }\n  }"],"mappings":"AAAA,OAAO,MAAMA,oBAAoB,CAAC;EAG9BC,MAAMA,CAACC,CAAS,EAAEC,GAAW,EAAgC;IAC3D,IAAIC,CAAC;IACL,MAAMC,CAAC,GAAGH,CAAC,GAAGC,GAAG,GAAG,GAAG;IACvB,MAAMG,CAAC,GAAGD,CAAC,GAAG,OAAO;IACrB,MAAME,EAAE,GAAGD,CAAC,GAAGA,CAAC;IAChB,MAAME,EAAE,GAAG,QAAQ,GAAG,SAAS,GAAGH,CAAC;IACnC,MAAMI,EAAE,GAAG,QAAQ,GAAG,UAAU,GAAGJ,CAAC,GAAG,QAAQ,GAAGE,EAAE;IACpD,IAAIG,EAAE,GAAG,OAAO,GAAG,EAAE,GAAGR,CAAC,GAAG,CAAC,GAAGC,GAAG;IACnC,IAAIQ,IAAI,GAAG,OAAO,GAAG,UAAU,GAAGN,CAAC,GAAG,CAAE,QAAQ,GAAK,OAAO,GAAIC,CAAC,IAAIC,EAAE;IAEvE,IAAIJ,GAAG,KAAK,CAAC,IAAIA,GAAG,KAAK,CAAC,EAAE;MAC1BQ,IAAI,IAAI,CAAC,MAAM,GAAG,OAAO,GAAGL,CAAC,IAAIM,IAAI,CAACC,GAAG,CAACb,oBAAoB,CAACc,GAAG,GAAGN,EAAE,CAAC,GAAG,MAAM,GAAGI,IAAI,CAACC,GAAG,CAACb,oBAAoB,CAACc,GAAG,GAAGL,EAAE,CAAC;IAC7H,CAAC,MAAM,IAAIN,GAAG,KAAK,CAAC,IAAIA,GAAG,KAAK,CAAC,EAAE;MACjCQ,IAAI,IAAI,CAAC,MAAM,GAAG,MAAM,GAAGL,CAAC,IAAIM,IAAI,CAACC,GAAG,CAACb,oBAAoB,CAACc,GAAG,GAAGN,EAAE,CAAC,GAAG,MAAM,GAAGI,IAAI,CAACC,GAAG,CAACb,oBAAoB,CAACc,GAAG,GAAGL,EAAE,CAAC;IAC5H,CAAC,MAAM;MACL,MAAM,IAAIM,KAAK,CAAC,0BAA0B,CAAC;IAC7C;IAEAX,CAAC,GAAGO,IAAI,IAAI,GAAG,GAAGC,IAAI,CAACI,KAAK,CAACL,IAAI,CAAC,GAAGC,IAAI,CAACK,IAAI,CAACN,IAAI,GAAG,GAAG,CAAC;IAC1DD,EAAE,IAAIN,CAAC;IAEP,MAAMc,IAAI,GAAGP,IAAI,GAAGP,CAAC;IAErB,OAAO;MAAEM,EAAE;MAAEQ;IAAK,CAAC;EACrB;AACF;AA5BWlB,oBAAoB,CACdc,GAAG,GAAWF,IAAI,CAACO,EAAE,GAAG,KAAK"},"metadata":{},"sourceType":"module","externalDependencies":[]}