{"ast":null,"code":"export class NRmatrix{constructor(n,m,a){this.nn=void 0;this.mm=void 0;this.v=void 0;if(n<=0||m<=0){throw new Error(\"Invalid matrix dimensions. Rows and columns must be greater than zero.\");}this.nn=n;this.mm=m;this.v=Array.from({length:n},()=>Array(m).fill(a));}get rows(){return this.nn;}get cols(){return this.mm;}get(row,col){if(row<0||row>=this.nn||col<0||col>=this.mm){throw new Error(\"NRmatrix subscript out of bounds\");}return this.v[row][col];}set(row,col,value){if(row<0||row>=this.nn||col<0||col>=this.mm){throw new Error(\"NRmatrix subscript out of bounds\");}this.v[row][col]=value;}resize(newn,newm,a){if(newn<=0||newm<=0){throw new Error(\"Invalid matrix dimensions. Rows and columns must be greater than zero.\");}if(newn!==this.nn||newm!==this.mm){this.nn=newn;this.mm=newm;this.v=Array.from({length:newn},()=>Array(newm).fill(a));}}printToScreen(){return this.v.map(row=>row.map(item=>String(item)).join(', ')).join('; ');}getMatrix(){return this.v;}setMatrix(matrix){this.v=matrix;}// Add more methods as needed\nhandleInvalidDimensions(){const errorMessage=\"Invalid matrix dimensions. Rows and columns must be greater than zero.\";// Display an alert on the webpage\nwindow.alert(errorMessage);// Throw an error to prevent further execution\nthrow new Error(errorMessage);}updateFromUserInput(inputString){const rows=inputString.split(';').map(row=>row.split(',').map(item=>parseFloat(item.trim())));if(rows.length!==this.nn||rows.some(row=>row.length!==this.mm)){throw new Error(\"Invalid matrix dimensions. Expected \".concat(this.nn,\" rows and \").concat(this.mm,\" columns.\"));}this.v=rows;}}","map":{"version":3,"names":["NRmatrix","constructor","n","m","a","nn","mm","v","Error","Array","from","length","fill","rows","cols","get","row","col","set","value","resize","newn","newm","printToScreen","map","item","String","join","getMatrix","setMatrix","matrix","handleInvalidDimensions","errorMessage","window","alert","updateFromUserInput","inputString","split","parseFloat","trim","some","concat"],"sources":["/home/jordan/numerical-recipes/src/models/NRmatrix.tsx"],"sourcesContent":["export class NRmatrix<T> {\n  private nn: number;\n  private mm: number;\n  private v: T[][];\n\n  constructor(n: number, m: number, a?: T) {\n    if (n <= 0 || m <= 0) {\n      throw new Error(\"Invalid matrix dimensions. Rows and columns must be greater than zero.\");\n    }\n\n    this.nn = n;\n    this.mm = m;\n    this.v = Array.from({ length: n }, () => Array(m).fill(a));\n  }\n\n\n\n  get rows(): number {\n    return this.nn;\n  }\n\n  get cols(): number {\n    return this.mm;\n  }\n\n  get(row: number, col: number): T {\n    if (row < 0 || row >= this.nn || col < 0 || col >= this.mm) {\n      throw new Error(\"NRmatrix subscript out of bounds\");\n    }\n    return this.v[row][col];\n  }\n\n  set(row: number, col: number, value: T): void {\n    if (row < 0 || row >= this.nn || col < 0 || col >= this.mm) {\n      throw new Error(\"NRmatrix subscript out of bounds\");\n    }\n    this.v[row][col] = value;\n  }\n\n  resize(newn: number, newm: number, a: T): void {\n    if (newn <= 0 || newm <= 0) {\n      throw new Error(\"Invalid matrix dimensions. Rows and columns must be greater than zero.\");\n    }\n\n    if (newn !== this.nn || newm !== this.mm) {\n      this.nn = newn;\n      this.mm = newm;\n      this.v = Array.from({ length: newn }, () => Array(newm).fill(a));\n    }\n  }\n\n  printToScreen(): string {\n    return this.v.map((row) => row.map((item) => String(item)).join(', ')).join('; ');\n  }\n\n  getMatrix(): T[][] {\n    return this.v;\n  }\n\n  setMatrix(matrix: T[][]): void {\n    this.v = matrix;\n  }\n  // Add more methods as needed\n\n  private handleInvalidDimensions(): void {\n    const errorMessage = \"Invalid matrix dimensions. Rows and columns must be greater than zero.\";\n\n    // Display an alert on the webpage\n    window.alert(errorMessage);\n\n    // Throw an error to prevent further execution\n    throw new Error(errorMessage);\n  }\n  updateFromUserInput(inputString: string): void {\n    const rows = inputString.split(';').map((row) => row.split(',').map((item) => parseFloat(item.trim())));\n\n    if (rows.length !== this.nn || rows.some((row) => row.length !== this.mm)) {\n      throw new Error(`Invalid matrix dimensions. Expected ${this.nn} rows and ${this.mm} columns.`);\n    }\n\n    this.v = rows as T[][];\n  }\n}\n"],"mappings":"AAAA,MAAO,MAAM,CAAAA,QAAY,CAKvBC,WAAWA,CAACC,CAAS,CAAEC,CAAS,CAAEC,CAAK,CAAE,MAJjCC,EAAE,aACFC,EAAE,aACFC,CAAC,QAGP,GAAIL,CAAC,EAAI,CAAC,EAAIC,CAAC,EAAI,CAAC,CAAE,CACpB,KAAM,IAAI,CAAAK,KAAK,CAAC,wEAAwE,CAAC,CAC3F,CAEA,IAAI,CAACH,EAAE,CAAGH,CAAC,CACX,IAAI,CAACI,EAAE,CAAGH,CAAC,CACX,IAAI,CAACI,CAAC,CAAGE,KAAK,CAACC,IAAI,CAAC,CAAEC,MAAM,CAAET,CAAE,CAAC,CAAE,IAAMO,KAAK,CAACN,CAAC,CAAC,CAACS,IAAI,CAACR,CAAC,CAAC,CAAC,CAC5D,CAIA,GAAI,CAAAS,IAAIA,CAAA,CAAW,CACjB,MAAO,KAAI,CAACR,EAAE,CAChB,CAEA,GAAI,CAAAS,IAAIA,CAAA,CAAW,CACjB,MAAO,KAAI,CAACR,EAAE,CAChB,CAEAS,GAAGA,CAACC,GAAW,CAAEC,GAAW,CAAK,CAC/B,GAAID,GAAG,CAAG,CAAC,EAAIA,GAAG,EAAI,IAAI,CAACX,EAAE,EAAIY,GAAG,CAAG,CAAC,EAAIA,GAAG,EAAI,IAAI,CAACX,EAAE,CAAE,CAC1D,KAAM,IAAI,CAAAE,KAAK,CAAC,kCAAkC,CAAC,CACrD,CACA,MAAO,KAAI,CAACD,CAAC,CAACS,GAAG,CAAC,CAACC,GAAG,CAAC,CACzB,CAEAC,GAAGA,CAACF,GAAW,CAAEC,GAAW,CAAEE,KAAQ,CAAQ,CAC5C,GAAIH,GAAG,CAAG,CAAC,EAAIA,GAAG,EAAI,IAAI,CAACX,EAAE,EAAIY,GAAG,CAAG,CAAC,EAAIA,GAAG,EAAI,IAAI,CAACX,EAAE,CAAE,CAC1D,KAAM,IAAI,CAAAE,KAAK,CAAC,kCAAkC,CAAC,CACrD,CACA,IAAI,CAACD,CAAC,CAACS,GAAG,CAAC,CAACC,GAAG,CAAC,CAAGE,KAAK,CAC1B,CAEAC,MAAMA,CAACC,IAAY,CAAEC,IAAY,CAAElB,CAAI,CAAQ,CAC7C,GAAIiB,IAAI,EAAI,CAAC,EAAIC,IAAI,EAAI,CAAC,CAAE,CAC1B,KAAM,IAAI,CAAAd,KAAK,CAAC,wEAAwE,CAAC,CAC3F,CAEA,GAAIa,IAAI,GAAK,IAAI,CAAChB,EAAE,EAAIiB,IAAI,GAAK,IAAI,CAAChB,EAAE,CAAE,CACxC,IAAI,CAACD,EAAE,CAAGgB,IAAI,CACd,IAAI,CAACf,EAAE,CAAGgB,IAAI,CACd,IAAI,CAACf,CAAC,CAAGE,KAAK,CAACC,IAAI,CAAC,CAAEC,MAAM,CAAEU,IAAK,CAAC,CAAE,IAAMZ,KAAK,CAACa,IAAI,CAAC,CAACV,IAAI,CAACR,CAAC,CAAC,CAAC,CAClE,CACF,CAEAmB,aAAaA,CAAA,CAAW,CACtB,MAAO,KAAI,CAAChB,CAAC,CAACiB,GAAG,CAAER,GAAG,EAAKA,GAAG,CAACQ,GAAG,CAAEC,IAAI,EAAKC,MAAM,CAACD,IAAI,CAAC,CAAC,CAACE,IAAI,CAAC,IAAI,CAAC,CAAC,CAACA,IAAI,CAAC,IAAI,CAAC,CACnF,CAEAC,SAASA,CAAA,CAAU,CACjB,MAAO,KAAI,CAACrB,CAAC,CACf,CAEAsB,SAASA,CAACC,MAAa,CAAQ,CAC7B,IAAI,CAACvB,CAAC,CAAGuB,MAAM,CACjB,CACA;AAEQC,uBAAuBA,CAAA,CAAS,CACtC,KAAM,CAAAC,YAAY,CAAG,wEAAwE,CAE7F;AACAC,MAAM,CAACC,KAAK,CAACF,YAAY,CAAC,CAE1B;AACA,KAAM,IAAI,CAAAxB,KAAK,CAACwB,YAAY,CAAC,CAC/B,CACAG,mBAAmBA,CAACC,WAAmB,CAAQ,CAC7C,KAAM,CAAAvB,IAAI,CAAGuB,WAAW,CAACC,KAAK,CAAC,GAAG,CAAC,CAACb,GAAG,CAAER,GAAG,EAAKA,GAAG,CAACqB,KAAK,CAAC,GAAG,CAAC,CAACb,GAAG,CAAEC,IAAI,EAAKa,UAAU,CAACb,IAAI,CAACc,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC,CAEvG,GAAI1B,IAAI,CAACF,MAAM,GAAK,IAAI,CAACN,EAAE,EAAIQ,IAAI,CAAC2B,IAAI,CAAExB,GAAG,EAAKA,GAAG,CAACL,MAAM,GAAK,IAAI,CAACL,EAAE,CAAC,CAAE,CACzE,KAAM,IAAI,CAAAE,KAAK,wCAAAiC,MAAA,CAAwC,IAAI,CAACpC,EAAE,eAAAoC,MAAA,CAAa,IAAI,CAACnC,EAAE,aAAW,CAAC,CAChG,CAEA,IAAI,CAACC,CAAC,CAAGM,IAAa,CACxB,CACF"},"metadata":{},"sourceType":"module","externalDependencies":[]}