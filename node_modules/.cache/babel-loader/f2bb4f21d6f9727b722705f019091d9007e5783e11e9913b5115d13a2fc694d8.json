{"ast":null,"code":"export class NRmatrix {\n  constructor(n, m, a) {\n    this.nn = void 0;\n    this.mm = void 0;\n    this.v = void 0;\n    if (n <= 0 || m <= 0) {\n      throw new Error(\"Invalid matrix dimensions. Rows and columns must be greater than zero.\");\n    }\n    this.nn = n;\n    this.mm = m;\n    this.v = Array.from({\n      length: n\n    }, () => Array(m).fill(a));\n  }\n  get rows() {\n    return this.nn;\n  }\n  get cols() {\n    return this.mm;\n  }\n  get(row, col) {\n    if (row < 0 || row >= this.nn || col < 0 || col >= this.mm) {\n      throw new Error(\"NRmatrix subscript out of bounds\");\n    }\n    return this.v[row][col];\n  }\n  set(row, col, value) {\n    if (row < 0 || row >= this.nn || col < 0 || col >= this.mm) {\n      throw new Error(\"NRmatrix subscript out of bounds\");\n    }\n    this.v[row][col] = value;\n  }\n  resize(newn, newm, a) {\n    if (newn <= 0 || newm <= 0) {\n      throw new Error(\"Invalid matrix dimensions. Rows and columns must be greater than zero.\");\n    }\n    if (newn !== this.nn || newm !== this.mm) {\n      this.nn = newn;\n      this.mm = newm;\n      this.v = Array.from({\n        length: newn\n      }, () => Array(newm).fill(a));\n    }\n  }\n  printToScreen() {\n    return this.v.map(row => row.map(item => String(item)).join(', ')).join('; ');\n  }\n  getMatrix() {\n    return this.v;\n  }\n  setMatrix(matrix) {\n    this.v = matrix;\n  }\n  // Add more methods as needed\n\n  handleInvalidDimensions() {\n    const errorMessage = \"Invalid matrix dimensions. Rows and columns must be greater than zero.\";\n\n    // Display an alert on the webpage\n    window.alert(errorMessage);\n\n    // Throw an error to prevent further execution\n    throw new Error(errorMessage);\n  }\n  updateFromUserInput(inputString) {\n    const rows = inputString.split(';').map(row => row.split(',').map(item => parseFloat(item.trim())));\n    if (rows.length !== this.nn || rows.some(row => row.length !== this.mm)) {\n      throw new Error(`Invalid matrix dimensions. Expected ${this.nn} rows and ${this.mm} columns.`);\n    }\n    this.v = rows;\n  }\n}","map":{"version":3,"names":["NRmatrix","constructor","n","m","a","nn","mm","v","Error","Array","from","length","fill","rows","cols","get","row","col","set","value","resize","newn","newm","printToScreen","map","item","String","join","getMatrix","setMatrix","matrix","handleInvalidDimensions","errorMessage","window","alert","updateFromUserInput","inputString","split","parseFloat","trim","some"],"sources":["/home/jordan/numerical-recipes/src/models/NRmatrix.tsx"],"sourcesContent":["export class NRmatrix<T> {\n  private nn: number;\n  private mm: number;\n  private v: T[][];\n\n  constructor(n: number, m: number, a?: T) {\n    if (n <= 0 || m <= 0) {\n      throw new Error(\"Invalid matrix dimensions. Rows and columns must be greater than zero.\");\n    }\n\n    this.nn = n;\n    this.mm = m;\n    this.v = Array.from({ length: n }, () => Array(m).fill(a));\n  }\n\n\n\n  get rows(): number {\n    return this.nn;\n  }\n\n  get cols(): number {\n    return this.mm;\n  }\n\n  get(row: number, col: number): T {\n    if (row < 0 || row >= this.nn || col < 0 || col >= this.mm) {\n      throw new Error(\"NRmatrix subscript out of bounds\");\n    }\n    return this.v[row][col];\n  }\n\n  set(row: number, col: number, value: T): void {\n    if (row < 0 || row >= this.nn || col < 0 || col >= this.mm) {\n      throw new Error(\"NRmatrix subscript out of bounds\");\n    }\n    this.v[row][col] = value;\n  }\n\n  resize(newn: number, newm: number, a: T): void {\n    if (newn <= 0 || newm <= 0) {\n      throw new Error(\"Invalid matrix dimensions. Rows and columns must be greater than zero.\");\n    }\n\n    if (newn !== this.nn || newm !== this.mm) {\n      this.nn = newn;\n      this.mm = newm;\n      this.v = Array.from({ length: newn }, () => Array(newm).fill(a));\n    }\n  }\n\n  printToScreen(): string {\n    return this.v.map((row) => row.map((item) => String(item)).join(', ')).join('; ');\n  }\n\n  getMatrix(): T[][] {\n    return this.v;\n  }\n\n  setMatrix(matrix: T[][]): void {\n    this.v = matrix;\n  }\n  // Add more methods as needed\n\n  private handleInvalidDimensions(): void {\n    const errorMessage = \"Invalid matrix dimensions. Rows and columns must be greater than zero.\";\n\n    // Display an alert on the webpage\n    window.alert(errorMessage);\n\n    // Throw an error to prevent further execution\n    throw new Error(errorMessage);\n  }\n  updateFromUserInput(inputString: string): void {\n    const rows = inputString.split(';').map((row) => row.split(',').map((item) => parseFloat(item.trim())));\n\n    if (rows.length !== this.nn || rows.some((row) => row.length !== this.mm)) {\n      throw new Error(`Invalid matrix dimensions. Expected ${this.nn} rows and ${this.mm} columns.`);\n    }\n\n    this.v = rows as T[][];\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}